from datetime import datetime
import requests
from urllib.parse import urlsplit

from django.utils import timezone
from .models import SettingsManager


def send_telegram_notification(order):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    tg_bot_token, tg_chat_id = SettingsManager.get_telegram_settings()

    if not tg_bot_token or not tg_chat_id:
        print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    delivery_datetime = timezone.make_aware(
        datetime.combine(order.delivery_date, order.delivery_time)
    )
    formatted_delivery_datetime = delivery_datetime.strftime("%d.%m.%Y %H:%M")

    message = (
        "üéÇ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç–æ—Ä—Ç–∞!*\n"
        f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.id}\n"
        "üë§ *–ö–ª–∏–µ–Ω—Ç:*\n"
        f"‚Ä¢ –ò–º—è: {order.client.name}\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {order.client.phone}\n"
        f"‚Ä¢ Email: {order.client.email or '–Ω–µ—Ç'}\n\n"
        "üì¶ *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n"
        f"‚Ä¢ –£—Ä–æ–≤–Ω–µ–π: {order.cake.get_levels_display()}\n"
        f"‚Ä¢ –§–æ—Ä–º–∞: {order.cake.get_shape_display()}\n"
        f"‚Ä¢ –¢–æ–ø–ø–∏–Ω–≥: {order.cake.get_topping_display()}\n"
        f"‚Ä¢ –ê–¥—Ä–µ—Å: {order.address}\n"
        f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment or '–Ω–µ—Ç'}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {formatted_delivery_datetime}\n"
        f"üíµ –°—É–º–º–∞: {order.total_price} —Ä—É–±."
    )

    keyboard = {"inline_keyboard": []}

    try:
        response = requests.post(
            f"https://api.telegram.org/bot{tg_bot_token}/sendMessage",
            json={
                "chat_id": tg_chat_id,
                "text": message,
                "parse_mode": "Markdown",
                "reply_markup": keyboard,
            },
            timeout=5,
        )
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


def get_vk_short_link(url):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    vk_token = SettingsManager.get_vk_token()
    if not vk_token:
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω VK –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
        print("–¢–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
        return url

    vk_api_url = 'https://api.vk.com/method/utils.getShortLink'
    payload = {
        'access_token': vk_token,
        'v': '5.199',
        'url': url
    }

    try:
        response = requests.get(vk_api_url, params=payload)
        response.raise_for_status()
        api_response = response.json()
        vk_short_url = api_response['response'].get('short_url')

        # –ë–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ –ë–î –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ
        return vk_short_url
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ VK: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
        return url


def is_vk_short_link(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–æ–π VK"""
    return urlsplit(url).netloc == 'vk.cc'


def count_vk_clicks(url):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ VK"""
    vk_token = SettingsManager.get_vk_token()
    if not vk_token:
        print("–¢–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–∫–æ–≤ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.")
        return 0
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–æ–π VK
    if not is_vk_short_link(url):
        url = get_vk_short_link(url)

    vk_api_url = 'https://api.vk.com/method/utils.getLinkStats'
    short_link = urlsplit(url)
    key_short_link = short_link.path.split('/')[-1]

    payload = {
        'access_token': vk_token,
        'v': '5.199',
        'key': key_short_link,
        # 'interval': 'forever',
        'extended': 0
    }

    try:
        response = requests.get(vk_api_url, params=payload)
        response.raise_for_status()
        api_response = response.json()
        url_stats = api_response.get('response', {}).get('stats', [])
        return url_stats[0].get('views', 0) if url_stats else 0
    except Exception:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è —Å—Å—ã–ª–∫–∏: {url}")
        return 0
